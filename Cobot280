import numpy as np
from ir_support import UR3
from spatialmath import SE3
from spatialgeometry import Cuboid, Cylinder, Mesh
from roboticstoolbox import DHLink, DHRobot, jtraj, PrismaticDH
from math import pi
import swift 
from pathlib import Path
import matplotlib.pyplot as plt
import keyboard
import spatialmath.base as spb
import trimesh
import roboticstoolbox as rtb
import os
import time
env = None
class myCobot280:
    def __init__(self,base_pos):
        #SET DH PARAMETERS FOR LINKS
        links = [
        DHLink(d=0.15, a=0, alpha=1.5708, offset=0),
        DHLink(d=0, a=-0.2, alpha=0, offset=-1.5708),
        DHLink(d=0, a=-0.2, alpha=0, offset=0),
        DHLink(d=-0.15, a=0, alpha=1.5708, offset=-1.5708),
        DHLink(d=0.1505, a=0, alpha=-1.5708, offset=1.5708),
        DHLink(d=0.0456, a=0, alpha=0, offset=0)]
        #SET MESH DIRECTORIES
        base_dir = "mycobot280_meshes\Base.stl"
        shoulder_dir = "mycobot280_meshes\Shoulder.stl"
        elbow_dir = "mycobot280_meshes\Elbow.stl"
        wrist_dir = "mycobot280_meshes\Wrist.stl"
        ee_dir = "mycobot280_meshes\End Effector.stl"
        #CREATE MESHES
        scale = [0.001,0.001,0.001]
        base_mesh = Mesh(base_dir,pose=SE3.Rx(pi/2),color = (0.6,0.5,0.2,1), scale = scale)
        shoulder_mesh = Mesh(shoulder_dir,pose = SE3(0,-0.15,0)*SE3.Ry(pi/2),color = (0.2,0.2,0.2,1), scale = scale)
        elbow1_mesh = Mesh(elbow_dir,pose = (SE3.Ry(-pi/2)*SE3.Rx(pi/2)*SE3(-0.151,-0.1,0)),color = (0.2,0.2,0.6,1), scale = scale)
        elbow2_mesh = Mesh(elbow_dir,pose = (SE3.Ry(pi/2)*SE3.Rx(pi/2)*SE3(0,0.1,0)),color = (0.2,0.6,0.3,1), scale = scale)
        wrist_mesh = Mesh(wrist_dir,pose=SE3.Rx(pi)*SE3.Ry(pi/2)*SE3(0,-0.0744,0),color = (0.2,0.2,0.2,1), scale = scale)
        ee_mesh = Mesh(ee_dir,pose=SE3.Rx(-pi/2)*SE3(0,-0.1,0),color = (0.2,0.2,0.2,1), scale = scale)

        #ATTACH MESHES TO LINKS
        #links[0].geometry = [base_mesh]
        links[0].geometry = [shoulder_mesh]
        links[1].geometry = [elbow1_mesh]
        links[2].geometry = [elbow2_mesh]
        links[3].geometry = [wrist_mesh]
        links[4].geometry = [ee_mesh]
        self.robot = DHRobot(links)
        
        self.robot.links[1].qlim = [-1.745,1.745]
        self.robot.links[2].qlim = [-2.7,2.7]


if __name__ == "__main__":
    env = swift.Swift()
    env.launch(realtime=True)
    r = myCobot280(SE3(0, 0, 0))
    env.add(r.robot)
    env.hold()


# # ------------------------------------------- ----------------------------------------#
# class cobot(DHRobot):
    
#     def __init__(self):
#         sca = 0.001  # Scale factor for the meshes
#         links = [
#             DHLink(d=0.15, a=0, alpha=1.5708, offset=0),
#             DHLink(d=0, a=-0.2, alpha=0, offset=-1.5708),
#             DHLink(d=0, a=-0.2, alpha=0, offset=0),
#             DHLink(d=-0.15, a=0, alpha=1.5708, offset=-1.5708),
#             DHLink(d=0.1505, a=0, alpha=-1.5708, offset=1.5708),
#             DHLink(d=0.0456, a=0, alpha=0, offset=0)
#         ]
#         mesh_dir = "mycobot280_meshes"
#         mesh_files = [
#             "Base.stl",
#             "Shoulder.stl",
#             "Elbow.stl",
#             "Elbow.stl",
#             "Wrist.stl",
#             "End Effector.stl"
#         ]

#         # Example transforms for each mesh (adjust as needed for your STL alignment)
#         mesh_transforms = [
#             SE3.Rx(pi/2),
#             SE3(0,-0.15,0)*SE3.Ry(pi/2),
#             SE3.Ry(-pi/2)*SE3.Rx(pi/2)*SE3(-0.151,-0.1,0),
#             SE3.Ry(pi/2)*SE3.Rx(pi/2)*SE3(0,0.1,0),
#             SE3.Rx(pi)*SE3.Ry(pi/2)*SE3(0,-0.0744,0),
#             SE3.Rx(-pi/2)*SE3(0,-0.1,0)
#         ]

#         cobot_colors = [
#             [0.35, 0.35, 0.35, 1.0],   # Darker gray base
#             [0.42, 0.43, 0.45, 1.0],   # Slightly bluish gray
#             [0.48, 0.48, 0.48, 1.0],   # Medium gray
#             [0.38, 0.39, 0.42, 1.0],   # Darker bluish gray
#             [0.45, 0.45, 0.45, 1.0],   # Medium-light gray
#             [0.32, 0.32, 0.32, 1.0]    # Dark gray
#         ]

        
#         for i, link in enumerate(links):
#             mesh_path = f"{mesh_dir}/{mesh_files[i]}"
#             print(f"Trying to load mesh: {mesh_path}")
#             try:
#                 link.geometry = [Mesh(mesh_path, scale=[sca, sca, sca], pose=mesh_transforms[i], color = cobot_colors[i])]
#                 print(f"Loaded mesh: {mesh_path}")
#             except Exception as e:
#                 print(f"Failed to load mesh {mesh_path}: {e}")
#         DHRobot.__init__(self, links, name='KUKA')
#         # Set a test joint configuration for visualization
#         self.q = [0, -pi/2, 0, 0, 0, 0]
#         self._qtest = [0,-pi/2,0,0,0,0]


#     # -----------------------------------------------------------------------------------#
#     def test(self):
#         """
#         Test the class by adding 3d objects into a new Swift window and do a simple movement
#         """
#         env = swift.Swift()
#         env.launch(realtime= True)
#         self.q = self._qtest
#         self.base = SE3(0,0,0)
#         env.add(self)

#         joint = 4  # Change this to test different joints (0 to 5)
#         q_goal = self.q.copy()
#         q_goal[joint] = self.q[joint] - 6 * pi  

#         qtraj = rtb.jtraj(self.q, q_goal, 300).q
#         for q in qtraj:
#             self.q = q
#             env.step(0.02)

            
#         env.hold()

#     def testAllJoints(self):
#         """
#         Test the class by adding 3d objects into a new Swift window and do a simple movement
#         """
#         env = swift.Swift()
#         env.launch(realtime= True)
#         self.q = self._qtest
#         self.base = SE3(0.5,0.5,0)
#         env.add(self)

#         q_goal = [self.q[i]-pi/3 for i in range(self.n)]
#         qtraj = rtb.jtraj(self.q, q_goal, 50).q
#         # fig = self.plot(self.q)
#         for q in qtraj:
#             self.q = q
#             env.step(0.02)
#             # fig.step(0.01)
#         time.sleep(3)
#         env.hold()

# # ---------------------------------------------------------------------------------------#
# if __name__ == "__main__":
#     cobot().test()
#     # env = swift.Swift()
#     # env.launch(realtime=True)
#     # r = cobot()
#     # r.base = SE3(0, 0, 0)
#     # env.add(r)

#     # env.hold()
